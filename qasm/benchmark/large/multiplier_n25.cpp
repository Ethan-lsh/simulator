#include <math.h>
#include "QuEST.h"
#include <time.h>
#include <stdio.h>
#ifndef M_PI
#define M_PI 3.14159265
#endif

void ccx(Qureg qubits, const int q1, const int q2, const int q3) {
    hadamard(qubits, q3);
    controlledNot(qubits, q2, q3);
    phaseShift(qubits, q3, -M_PI/4);
    controlledNot(qubits, q1, q3);
    tGate(qubits, q3);
    controlledNot(qubits, q2, q3);
    phaseShift(qubits, q3, -M_PI/4);
    controlledNot(qubits, q1, q3);
    tGate(qubits, q2);
    tGate(qubits, q3);
    controlledNot(qubits, q1, q2);
    hadamard(qubits, q3);
    tGate(qubits, q1);
    phaseShift(qubits, q2, -M_PI/4);
    controlledNot(qubits, q1, q2);
}

int main(int argc, char *argv[]) {
    QuESTEnv env = createQuESTEnv();
    Qureg qubits = createQureg(25, env);
    int measured[25];

    printf("-------------------------------------------------------\n");
    printf("Running QuEST tutorial:\n\t teleportation_n3.cpp \n");
    printf("-------------------------------------------------------\n");
    reportQuESTEnv(env);

    initZeroState(qubits);

    clock_t start, finish;
    double duration;

    start = clock();

    pauliX(qubits, 16);
    pauliX(qubits, 20);
    pauliX(qubits, 21);
    ccx(qubits, 20, 15, 1);
    ccx(qubits, 1, 2, 3);
    ccx(qubits, 20, 16, 4);
    controlledNot(qubits, 1, 2);
    ccx(qubits, 4, 5, 6);
    ccx(qubits, 20, 17, 7);
    ccx(qubits, 0, 2, 3);
    controlledNot(qubits, 4, 5);
    ccx(qubits, 7, 8, 9);
    ccx(qubits, 20, 18, 10);
    ccx(qubits, 3, 5, 6);
    controlledNot(qubits, 7, 8);
    ccx(qubits, 10, 11, 12);
    ccx(qubits, 20, 19, 13);
    ccx(qubits, 6, 8, 9);
    controlledNot(qubits, 10, 11);
    controlledNot(qubits, 13, 14);
    ccx(qubits, 9, 11, 12);
    controlledNot(qubits, 12, 14);
    ccx(qubits, 9, 11, 12);
    controlledNot(qubits, 10, 11);
    ccx(qubits, 10, 11, 12);
    controlledNot(qubits, 10, 11);
    controlledNot(qubits, 9, 11);
    ccx(qubits, 6, 8, 9);
    controlledNot(qubits, 7, 8);
    ccx(qubits, 7, 8, 9);
    controlledNot(qubits, 7, 8);
    controlledNot(qubits, 6, 8);
    ccx(qubits, 3, 5, 6);
    controlledNot(qubits, 4, 5);
    ccx(qubits, 4, 5, 6);
    controlledNot(qubits, 4, 5);
    controlledNot(qubits, 3, 5);
    ccx(qubits, 0, 2, 3);
    controlledNot(qubits, 1, 2);
    ccx(qubits, 1, 2, 3);
    controlledNot(qubits, 1, 2);
    controlledNot(qubits, 0, 2);
    ccx(qubits, 20, 15, 1);
    ccx(qubits, 1, 2, 3);
    ccx(qubits, 20, 16, 4);
    controlledNot(qubits, 1, 2);
    ccx(qubits, 20, 17, 7);
    ccx(qubits, 0, 2, 3);
    ccx(qubits, 20, 18, 10);
    ccx(qubits, 20, 19, 13);
    ccx(qubits, 21, 15, 4);
    ccx(qubits, 4, 5, 6);
    ccx(qubits, 21, 16, 7);
    controlledNot(qubits, 4, 5);
    ccx(qubits, 7, 8, 9);
    ccx(qubits, 21, 17, 10);
    ccx(qubits, 3, 5, 6);
    controlledNot(qubits, 7, 8);
    ccx(qubits, 10, 11, 12);
    ccx(qubits, 21, 18, 13);
    ccx(qubits, 6, 8, 9);
    controlledNot(qubits, 10, 11);
    controlledNot(qubits, 13, 14);
    ccx(qubits, 9, 11, 12);
    controlledNot(qubits, 12, 14);
    ccx(qubits, 9, 11, 12);
    controlledNot(qubits, 10, 11);
    ccx(qubits, 10, 11, 12);
    controlledNot(qubits, 10, 11);
    controlledNot(qubits, 9, 11);
    ccx(qubits, 6, 8, 9);
    controlledNot(qubits, 7, 8);
    ccx(qubits, 7, 8, 9);
    controlledNot(qubits, 7, 8);
    controlledNot(qubits, 6, 8);
    ccx(qubits, 3, 5, 6);
    controlledNot(qubits, 4, 5);
    ccx(qubits, 4, 5, 6);
    controlledNot(qubits, 4, 5);
    controlledNot(qubits, 3, 5);
    ccx(qubits, 0, 2, 3);
    ccx(qubits, 21, 15, 4);
    controlledNot(qubits, 1, 2);
    ccx(qubits, 4, 5, 6);
    ccx(qubits, 21, 16, 7);
    ccx(qubits, 1, 2, 3);
    controlledNot(qubits, 4, 5);
    ccx(qubits, 21, 17, 10);
    controlledNot(qubits, 1, 2);
    ccx(qubits, 21, 18, 13);
    controlledNot(qubits, 0, 2);
    ccx(qubits, 22, 15, 7);
    ccx(qubits, 1, 2, 3);
    ccx(qubits, 7, 8, 9);
    ccx(qubits, 22, 16, 10);
    controlledNot(qubits, 1, 2);
    controlledNot(qubits, 7, 8);
    ccx(qubits, 10, 11, 12);
    ccx(qubits, 22, 17, 13);
    ccx(qubits, 0, 2, 3);
    controlledNot(qubits, 10, 11);
    controlledNot(qubits, 13, 14);
    ccx(qubits, 3, 5, 6);
    ccx(qubits, 6, 8, 9);
    ccx(qubits, 9, 11, 12);
    controlledNot(qubits, 12, 14);
    ccx(qubits, 9, 11, 12);
    controlledNot(qubits, 10, 11);
    ccx(qubits, 10, 11, 12);
    controlledNot(qubits, 10, 11);
    controlledNot(qubits, 9, 11);
    ccx(qubits, 6, 8, 9);
    controlledNot(qubits, 7, 8);
    ccx(qubits, 7, 8, 9);
    controlledNot(qubits, 7, 8);
    controlledNot(qubits, 6, 8);
    ccx(qubits, 3, 5, 6);
    ccx(qubits, 22, 15, 7);
    controlledNot(qubits, 4, 5);
    ccx(qubits, 7, 8, 9);
    ccx(qubits, 22, 16, 10);
    ccx(qubits, 4, 5, 6);
    controlledNot(qubits, 7, 8);
    ccx(qubits, 22, 17, 13);
    controlledNot(qubits, 4, 5);
    ccx(qubits, 23, 15, 10);
    controlledNot(qubits, 3, 5);
    ccx(qubits, 10, 11, 12);
    ccx(qubits, 23, 16, 13);
    ccx(qubits, 0, 2, 3);
    ccx(qubits, 4, 5, 6);
    controlledNot(qubits, 10, 11);
    controlledNot(qubits, 13, 14);
    controlledNot(qubits, 1, 2);
    controlledNot(qubits, 4, 5);
    ccx(qubits, 1, 2, 3);
    controlledNot(qubits, 1, 2);
    controlledNot(qubits, 0, 2);
    ccx(qubits, 1, 2, 3);
    controlledNot(qubits, 1, 2);
    ccx(qubits, 0, 2, 3);
    ccx(qubits, 3, 5, 6);
    ccx(qubits, 6, 8, 9);
    ccx(qubits, 9, 11, 12);
    controlledNot(qubits, 12, 14);
    ccx(qubits, 9, 11, 12);
    controlledNot(qubits, 10, 11);
    ccx(qubits, 10, 11, 12);
    controlledNot(qubits, 10, 11);
    controlledNot(qubits, 9, 11);
    ccx(qubits, 6, 8, 9);
    ccx(qubits, 23, 15, 10);
    controlledNot(qubits, 7, 8);
    ccx(qubits, 10, 11, 12);
    ccx(qubits, 23, 16, 13);
    ccx(qubits, 7, 8, 9);
    controlledNot(qubits, 10, 11);
    ccx(qubits, 24, 15, 13);
    controlledNot(qubits, 7, 8);
    controlledNot(qubits, 13, 14);
    controlledNot(qubits, 6, 8);
    ccx(qubits, 3, 5, 6);
    ccx(qubits, 7, 8, 9);
    controlledNot(qubits, 4, 5);
    controlledNot(qubits, 7, 8);
    ccx(qubits, 4, 5, 6);
    controlledNot(qubits, 4, 5);
    controlledNot(qubits, 3, 5);
    ccx(qubits, 0, 2, 3);
    ccx(qubits, 4, 5, 6);
    controlledNot(qubits, 1, 2);
    controlledNot(qubits, 4, 5);
    ccx(qubits, 1, 2, 3);
    controlledNot(qubits, 1, 2);
    controlledNot(qubits, 0, 2);
    ccx(qubits, 1, 2, 3);
    controlledNot(qubits, 1, 2);
    ccx(qubits, 0, 2, 3);
    ccx(qubits, 3, 5, 6);
    ccx(qubits, 6, 8, 9);
    ccx(qubits, 9, 11, 12);
    controlledNot(qubits, 12, 14);
    ccx(qubits, 9, 11, 12);
    ccx(qubits, 24, 15, 13);
    controlledNot(qubits, 10, 11);
    ccx(qubits, 10, 11, 12);
    controlledNot(qubits, 10, 11);
    controlledNot(qubits, 9, 11);
    ccx(qubits, 6, 8, 9);
    controlledNot(qubits, 7, 8);
    ccx(qubits, 7, 8, 9);
    controlledNot(qubits, 7, 8);
    controlledNot(qubits, 6, 8);
    ccx(qubits, 3, 5, 6);
    controlledNot(qubits, 4, 5);
    ccx(qubits, 4, 5, 6);
    controlledNot(qubits, 4, 5);
    controlledNot(qubits, 3, 5);
    ccx(qubits, 0, 2, 3);
    controlledNot(qubits, 1, 2);
    ccx(qubits, 1, 2, 3);
    controlledNot(qubits, 1, 2);
    controlledNot(qubits, 0, 2);
    measured[2] = measure(qubits, 2);
    measured[5] = measure(qubits, 5);
    measured[8] = measure(qubits, 8);
    measured[11] = measure(qubits, 11);
    measured[14] = measure(qubits, 14);

    finish = clock();

    duration = (double)(finish-start) * pow(10,3);
    printf("Time: %f \n", duration);
    
    destroyQureg(qubits, env);
    destroyQuESTEnv(env);
    return 0;
}
